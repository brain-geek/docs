---
title: "Run a Meteor App"
layout: framework_docs
redirect_from:
 - /docs/languages-and-frameworks/meteor/
 - /docs/getting-started/meteor/
objective: Meteor is a full-stack JavaScript framework for building modern web and mobile applications.
order: 14
---

<% app_name = "hello-meteor" %>
<%= partial "partials/intro", locals: { runtime: "Meteor", link: "https://meteor.com" } %>

We'll be using the standard web application generated by [Meteor](https://meteor.com/). This is a bare-bones app that needs a MongoDB database.

```cmd
npx meteor
```
```output
=> Arch: os.osx.arm64
=> Meteor Release: 3.0
Downloading |█████████████████████████████████░░░░░░░| 82%
```

## _Generate the Meteor app_

We'll assume you have NodeJS installed already. Meteor 3 requires NodeJS version 20 or higher.

Let's create a new project by running `meteor create`. This will as you which skeleton you'd like to use to scaffold your new project.

```cmd
meteor create hello-meteor
```
```output

```



## _Building the Application_

Building a Meteor app happens in two stages, both of which are executed when the command `npm run build` is run.

Firstly, Vite undertakes the creation of an optimized production build that encompasses your server code, browser code, and, if applicable, your service worker. Pre-rendering is carried out during this stage if deemed necessary.

Secondly, an adapter is employed to fine-tune this production build to align with your specific target environment.

## _Preview your Application_

Once the build process is complete, you can preview your production build locally by executing the command `meteor run`.

```cmd
meteor run
```
```output
[[[[[ ~/hello-meteor ]]]]]

=> Started proxy.
=> Started HMR server.
=> Started MongoDB.
=> Started your app.

=> App running at: http://localhost:3000/
```

## _Install flyctl and Login_

We are ready to start working with Fly.io, and that means we need `flyctl`, our CLI app for managing apps on Fly.io. If you've already installed it, carry on. If not, hop over to [our installation guide](/docs/flyctl/install/). Once that's installed you'll want to [log in to Fly.io](/docs/getting-started/sign-up-sign-in/).

## _Deploy the app on Fly.io_

Each Fly App needs a `fly.toml` file to tell the system how we'd like to deploy it.
That file can be automatically generated with  `fly launch`. This command will also generate a Dockerfile for deployment.

```cmd
fly launch
```
```output
Creating app in \fly\guides\hello-meteor
Scanning source code
Detected a Meteor app
? Choose an app name (leave blank to generate one): hello-meteor
? Select Organization: demo (demo)
? Select region: ord (Chicago, Illinois (US))
App will use 'ord' region as primary

Created app 'hello-meteor' in organization 'demo'
Admin URL: https://fly.io/apps/hello-meteor
Hostname: hello-meteor.fly.dev
installing: npm install @flydotio/dockerfile --save-dev
...
Wrote config file fly.toml
Validating \fly\guides\hello-meteor\fly.toml
Platform: machines
✓ Configuration is valid

If you need custom packages installed, or have problems with your deployment
build, you may need to edit the Dockerfile for app-specific changes. If you
need help, please post on https://community.fly.io.

Now: run 'fly deploy' to deploy your Node app.
...
```

## _Inside `fly.toml`_

The `fly.toml` file now contains a default configuration for deploying your app. In the process of creating that file, `flyctl` has also created a Fly.io application slot of the same name, "hello-meteor". If we look at the `fly.toml` configuration file we can see the name in there:

```toml
app = "hello-meteor"
primary_region = "ord"

[env]
  PORT = "3000"
  ROOT_URL = "https://hello-meteor.fly.dev/"

[http_service]
  internal_port = 3000
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ["app"]
...
```

The `flyctl` command will always refer to this file in the current directory if it exists, specifically for the `app` name/value at the start. That name will be used to identify the application to the Fly.io platform.

The rest of the file contains settings to be applied to the application when it deploys.

## Deploying to Fly.io

We are now ready to deploy our containerized app to Fly.io:

```cmd
fly deploy
```

This will get the app name `hello-meteor` from our `fly.toml` and start the process of deploying our application to Fly.io using the Dockerfile. `fly` will return you to the command line when it's done.

## _Viewing the Deployed App_

If you want to find out more about the deployment. The command `fly status` will give you all the essential details.

```cmd
fly status
```
```output
App
  Name     = hello-meteor
  Owner    = personal
  Hostname = hello-meteor.fly.dev
  Image    = hello-meteor:deployment-01H4MDR3GVFX20X5DNVZS4BPWK
  Platform = machines

Machines
PROCESS ID              VERSION REGION  STATE   CHECKS  LAST UPDATED
app     91857500000083  1       ord     started         2023-07-06T01:49:28Z
app     e2865100000086  1       ord     stopped         2023-07-06T01:50:04Z
```

## _Connecting to the App_

The quickest way to browse your newly deployed application is with the `flyctl apps open` command.

```cmd
flyctl apps open
```
```output
Opening https://hello-meteor.fly.dev/
```

Your browser will be sent to the displayed URL.

## _Bonus Points_

If you want to know what IP addresses the app is using, try `fly ips list`:

```cmd
fly ips list
```

```out
VERSION IP                      TYPE            REGION  CREATED AT 
v6      2a09:8280:1::69:37fd    public          global  18m55s ago
v4      66.241.125.223          public (shared)
```

## A word on Session Affinity (AKA 'Sticky Sessions')

## Arrived at Destination

You have successfully built, deployed, and connected to your first Meteor application on Fly.io.
